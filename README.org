#+TITLE: SAT-Solver based on conservative retractions

The project aims to solve the famous SAT problem in a efficient way. In order
to do that it's used an original algorithm based on conservative
retractions (dual notion of conservtive extension). Further
information obout it could be found [[ ][here?]].

The documentation about the modules it's hosted [[https://danielrodcha.github.io/SAT-canonical/][here]].

* User guide (Spanish)
Aquí se describen las pautas a seguir para poder usar la librería,
suponiendo que el lector no tiene instalados ninguno de los programas
necesarios.

** Git
En primer lugar será necesario [[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git][git]] . En caso de no estar instalado
siga las instrucciones del enlace anterior.

Una vez instalado git correctamente, vaya a la terminal de comandos y
escriba:

#+BEGIN_SRC
git clone https://github.com/DanielRodCha/SAT-canonical.git
#+END_SRC

** Stack
La librería está escrita en lenguaje Haskell, así que se será
necesario instalar la herramienta [[https://docs.haskellstack.org/en/stable/README/][stack]]. Dicha herramienta será muy
útil ya que construirá todo el proyecto, además de descargar las
librerías auxiliares.

Tras haber completado la instalación de la herramienta stack, navegue
por los ficheros desde el terminal hasta encontrarse en la carpeta
SAT-Pol, que se creó en el paso anterior. A continuación, construya el
proyecto escribiendo en el terminal:

#+BEGIN_SRC
stack update
stack build
#+END_SRC

** MainFunctions
*** Cargar el módulo MainFunctions
Por último, se recomienda al usuario que cargue el módulo
src/MainFunctions,  ya que en él figuran las funciones más importantes
de la librería. Para ello, escriba en la terminal:

#+BEGIN_SRC
:SAT-canonical danrodcha$ stack ghci
Configuring GHCi with the following packages: SAT-canonical


The main module to load is ambiguous. Candidates are: 
1. Package `SAT-canonical' component exe:sat with main-is file: /Users/danrodcha/SAT-canonical/app2/Main.hs
2. Package `SAT-canonical' component exe:satCNF with main-is file: /Users/danrodcha/SAT-canonical/app/Main.hs
You can specify which one to pick by: 
 * Specifying targets to stack ghci e.g. stack ghci SAT-canonical:exe:sat
 * Specifying what the main is e.g. stack ghci --main-is SAT-canonical:exe:sat
 * Choosing from the candidate above [1..2]


Specify main module to use (press enter to load none):
#+END_SRC

Pulse Enter:

#+BEGIN_SRC
Not loading any main modules, as no valid module selected

GHCi, version 8.2.2: http://www.haskell.org/ghc/  :? for help
[1 of 8] Compiling Logic            ( /Users/danrodcha/SAT-canonical/src/Logic.hs, interpreted )
[2 of 8] Compiling Heuristics       ( /Users/danrodcha/SAT-canonical/src/Heuristics.hs, interpreted )
[3 of 8] Compiling LogicParser      ( /Users/danrodcha/SAT-canonical/src/LogicParser.hs, interpreted )
[4 of 8] Compiling Simplification   ( /Users/danrodcha/SAT-canonical/src/Simplification.hs, interpreted )
[5 of 8] Compiling Preprocessing    ( /Users/danrodcha/SAT-canonical/src/Preprocessing.hs, interpreted )
[6 of 8] Compiling Canonical        ( /Users/danrodcha/SAT-canonical/src/Canonical.hs, interpreted )
[7 of 8] Compiling Saturation       ( /Users/danrodcha/SAT-canonical/src/Saturation.hs, interpreted )
[8 of 8] Compiling MainFunctions    ( /Users/danrodcha/SAT-canonical/src/MainFunctions.hs, interpreted )
Ok, 8 modules loaded.
Loaded GHCi configuration from /private/var/folders/k5/5wbfgm4d5cbbbgm0c9hqk94m0000gn/T/ghci5683/ghci-script
*Simplification Canonical Heuristics Logic LogicParser MainFunctions Preprocessing Saturation Simplification> 
#+END_SRC

Cargue el módulo MainFunctions:

#+BEGIN_SRC
*Simplification Canonical Heuristics Logic LogicParser MainFunctions Preprocessing Saturation Simplification> :l MainFunctions 
[1 of 8] Compiling Logic            ( /Users/danrodcha/SAT-canonical/src/Logic.hs, interpreted )
[2 of 8] Compiling Heuristics       ( /Users/danrodcha/SAT-canonical/src/Heuristics.hs, interpreted )
[3 of 8] Compiling LogicParser      ( /Users/danrodcha/SAT-canonical/src/LogicParser.hs, interpreted )
[4 of 8] Compiling Simplification   ( /Users/danrodcha/SAT-canonical/src/Simplification.hs, interpreted )
[5 of 8] Compiling Preprocessing    ( /Users/danrodcha/SAT-canonical/src/Preprocessing.hs, interpreted )
[6 of 8] Compiling Canonical        ( /Users/danrodcha/SAT-canonical/src/Canonical.hs, interpreted )
[7 of 8] Compiling Saturation       ( /Users/danrodcha/SAT-canonical/src/Saturation.hs, interpreted )
[8 of 8] Compiling MainFunctions    ( /Users/danrodcha/SAT-canonical/src/MainFunctions.hs, interpreted )
Ok, 8 modules loaded.
*MainFunctions> 
#+END_SRC

*** Consideraciones previas
Como una base de conocimiento es un conjunto de reglas, las listas de
reglas se sumergirán en el tipo de dato Set (conjunto). Esto nos
permite trabajar con bases de conocimiento sin elementos repetidos, es
decir sin redundancias. Para hacer esta inmersión manualmente se puede
usar la función fromList:

#+BEGIN_SRC haskell
*MainFunctions> S.fromList []
fromList []
*MainFunctions> S.fromList [1,2,3,1,2]
fromList [1,2,3]
#+END_SRC

A continuación se exponen las principales tareas que puede resolver esta librería:
*** Olvidar una variable mediante el operador de omisión canónico:
Para ello basta con usar la función forgetVarKB:

#+BEGIN_SRC haskell
*MainFunctions> f1 = Disj p q
*MainFunctions> f2 = Conj q p
*MainFunctions> forgetVarKB "p" (S.fromList[f1,f2])
fromList [⊤,q,(q & q)]
*MainFunctions> forgetVarKB "q" (S.fromList[f1,Neg f2])
fromList [⊤,(-p | p)]
#+END_SRC

*** Olvidar una lista determinada de variables mediante el operador de omisión canónico:
Existen dos formas de hacerlo, dejando que la librería escoja el orden
en el que va a olvidar cada variable (según una heurística) o
especificándolo manualmente.

- Según heurística:
#+BEGIN_SRC haskell
*MainFunctions> f1 = Conj p q
*MainFunctions> f2 = (Neg r)
*MainFunctions> f3 = Disj r (Neg q)
*MainFunctions> forgetVarListKB' (S.fromList [f1,f2,f3]) ["p","q","r"] frequency
[fromList [-r,(q & q),(r | -q)],fromList [⊤,r,-r],fromList [⊥]]
#+END_SRC

- Orden dado:
#+BEGIN_SRC haskell
*MainFunctions> f1 = Conj p q
*MainFunctions> f2 = (Neg r)
*MainFunctions> f3 = Disj r (Neg q)
*MainFunctions> forgetVarListKB (S.fromList [f1,f2,f3]) ["p","q","r"]
[fromList [-r,(q & q),(r | -q)],fromList [⊤,r,-r],fromList [⊥]]
*MainFunctions> forgetVarListKB (S.fromList [f1,f2,f3]) ["r","q","p"]
[fromList [⊤,-q,(p & q)],fromList [⊥],fromList [⊥]]
#+END_SRC

*** Resolver el problema SAT
Existen dos funciones para hacerlo, la primera resuelve directamente
el problema y nos da la solución:

#+BEGIN_SRC haskell
*MainFunctions> f1 = Conj p q
*MainFunctions> f2 = (Neg r)
*MainFunctions> f3 = Disj r (Neg q)
*MainFunctions> saturateKB (S.fromList [f1,f2,f3]) ["r","q","p"] frequency
False
#+END_SRC

Mientras que la segunda, devuelve la traza de los cálculos realizados:

#+BEGIN_SRC haskell
*MainFunctions> f1 = Conj p q
*MainFunctions> f2 = (Neg r)
*MainFunctions> f3 = Disj r (Neg q)
*MainFunctions> saturateKBTrace (S.fromList [f1,f2,f3]) ["r","q","p"] frequency
[(fromList [-r,(p & q),(r | -q)],True),(fromList [⊤,-q,(p & q)],True),(fromList [⊤,-q,(q & q)],True),(fromList [⊥],False)]
#+END_SRC
*** Instancias escritas en archivos de texto
Una de las ventajas de esta librería es que permite interactuar con
ejemplos escritos en archivos de texto, aunque deben estar escritos en
formatos aptos, es decir, formato [[http://www.satcompetition.org/2009/format-benchmarks2009.html][DIMACS]] o la [[http://www.cs.us.es/~fsancho/?e=173][sintaxis de Prover9]]:

Si el archivo contiene la base de conocimiento en formato DIMACS, las
funciones que sirven para interactuar son:

#+BEGIN_SRC haskell
*MainFunctions> dimacs "exDIMACS/easy/example1.txt"
(fromList [⊤,(p2 | p1)],["p2","p1"])
*MainFunctions> satCNF "exDIMACS/easy/example1.txt" frequency
The satisfactibility of instance exDIMACS/easy/example1.txt is:
True
*MainFunctions> dimacs "exDIMACS/easy/example4.txt"
(fromList [⊤,(p2 | p1),(p2 | -p1),(-p2 | p1),(-p2 | -p1)],["p2","p1"])
*MainFunctions> satCNF "exDIMACS/easy/example4.txt" frequency
The satisfactibility of instance exDIMACS/easy/example4.txt is:
False
#+END_SRC

Por otro lado, si el archivo contiene la base de conocimiento según la
sintaxis de Prover9 (teniendo en cuenta que sólo trabaja con lógica
proposicional), las funciones son:

#+BEGIN_SRC haskell
*MainFunctions> formulas "exFORMULAS/easy/example1.txt"
(fromList [-(p4 -> p1),(p3 & p1),(p1 | p2),(p1 | -p3)],["p4","p1","p3","p2"])
*MainFunctions> satFORMULAS "exFORMULAS/easy/example1.txt" frequency
The satisfactibility of instance exFORMULAS/easy/example1.txt is:
False

#+END_SRC

*** Resolver una instancia SAT desde la terminal de comandos
La herramienta stack incluye la posibilidad de crear accesos directos
a ciertas funciones. Aprovechando esto se han definido dos distintos
en función del fichero de entrada. Si el conjunto de fórmulas está en
formato DIMACS el ejecutable que se debe usar se llama satCNF, seguido
del fichero que se quiere usar, así como de la heurística escogida:

#+BEGIN_SRC
MacBook-Air-de-Daniel:SAT-canonical danrodcha$ stack build
MacBook-Air-de-Daniel:SAT-canonical danrodcha$ stack exec satCNF exDIMACS/medium/exampleSat0.txt frequency
The satisfactibility of instance exDIMACS/medium/exampleSat0.txt is:
True
#+END_SRC

Si el conjunto de fórmulas sigue la sintaxis de Prove9, el ejecutable
que se debe usar se llama sat, y debe ir seguido del fichero que se
quiere usar, así como de la heurística escogida:

#+BEGIN_SRC
MacBook-Air-de-Daniel:SAT-canonical danrodcha$ stack build
MacBook-Air-de-Daniel:SAT-Pol danrodcha$ stack exec sat exFORMULAS/easy/example1.txt frequency
The satisfactibility of instance exFORMULAS/easy/example1.txt solved by frequency heuristics is:
False
#+END_SRC

* exDIMACS study
This directory stores several examples of sets of formulas in DIMACS format. See [[http://www.satcompetition.org/2009/format-benchmarks2009.html][DIMACS format]] for further
information about it.
*** Trivial Examples
**** example1
+ Corresponds to the formula: (p ^ q)
+ It's True
**** example2
+ Corresponds to the formula: (p ^ q) v (¬p ^ q)
+ It's True
**** example3
+ Corresponds to the formula: (p ^ q) v (¬p ^ q) v (p ^ ¬q)
+ It's True
**** example4
+ Corresponds to the formula: (p ^ q) v (¬p ^ q) v (p ^ ¬q) v (¬p ^ ¬q)
+ It's False
*** Medium Examples
**** exampleSat0
#+BEGIN_SRC haskell
*MainFunctions> satCNF "exDIMACS/medium/exampleSat0.txt" frequency
The satisfactibility of instance exDIMACS/medium/exampleSat0.txt is:
True
(0.15 secs, 16,183,888 bytes)
#+END_SRC
**** exampleSat1
#+BEGIN_SRC haskell
*MainFunctions> satCNF "exDIMACS/medium/exampleSat1.txt" frequency
The satisfactibility of instance exDIMACS/medium/exampleSat1.txt is:
True
(0.17 secs, 18,794,728 bytes)
#+END_SRC
**** exampleSat2
#+BEGIN_SRC haskell
*MainFunctions> satCNF "exDIMACS/medium/exampleSat2.txt" frequency
The satisfactibility of instance exDIMACS/medium/exampleSat2.txt is:
True
(0.33 secs, 38,287,824 bytes)
#+END_SRC
**** exampleSat3
#+BEGIN_SRC haskell
*MainFunctions> satCNF "exDIMACS/medium/exampleSat3.txt" frequency
The satisfactibility of instance exDIMACS/medium/exampleSat3.txt is:

#+END_SRC
*** Hard Examples
**** sat100
+ Has 430 clauses
+ Has 100 variables
+ It's True
**** sat250
+ Has 1065 clauses
+ Has 250 variables
+ It's True
**** unsat250
+ Has 1065 clauses
+ Has 250 variables
+ It's False
#+BEGIN_SRC haskell
*MainFunctions> satCNF "exDIMACS/hard/unsat250.cnf" frequency
The satisfactibility of instance exDIMACS/hard/unsat250.cnf is:
False
(0.24 secs, 72,635,480 bytes)
#+END_SRC


** References 
https://github.com/andrepd/haskell-logic/blob/master/logic_parser.hs
